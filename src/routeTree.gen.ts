/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/Dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as FleetIndexImport } from './routes/Fleet/index'
import { Route as DashboardIndexImport } from './routes/Dashboard/index'
import { Route as FleetAddRobotImport } from './routes/Fleet/addRobot'
import { Route as DashboardUserIndexImport } from './routes/Dashboard/user/index'
import { Route as DashboardBatteryIndexImport } from './routes/Dashboard/battery/index'
import { Route as DashboardStationIndexImport } from './routes/Dashboard/Station/index'
import { Route as DashboardRobotIndexImport } from './routes/Dashboard/Robot/index'
import { Route as DashboardFilterComponentRobotFilterImport } from './routes/Dashboard/FilterComponent/robotFilter'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/Dashboard',
  path: '/Dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const FleetIndexRoute = FleetIndexImport.update({
  id: '/Fleet/',
  path: '/Fleet/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const FleetAddRobotRoute = FleetAddRobotImport.update({
  id: '/Fleet/addRobot',
  path: '/Fleet/addRobot',
  getParentRoute: () => rootRoute,
} as any)

const DashboardUserIndexRoute = DashboardUserIndexImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardBatteryIndexRoute = DashboardBatteryIndexImport.update({
  id: '/battery/',
  path: '/battery/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardStationIndexRoute = DashboardStationIndexImport.update({
  id: '/Station/',
  path: '/Station/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardRobotIndexRoute = DashboardRobotIndexImport.update({
  id: '/Robot/',
  path: '/Robot/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardFilterComponentRobotFilterRoute =
  DashboardFilterComponentRobotFilterImport.update({
    id: '/FilterComponent/robotFilter',
    path: '/FilterComponent/robotFilter',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard': {
      id: '/Dashboard'
      path: '/Dashboard'
      fullPath: '/Dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/Fleet/addRobot': {
      id: '/Fleet/addRobot'
      path: '/Fleet/addRobot'
      fullPath: '/Fleet/addRobot'
      preLoaderRoute: typeof FleetAddRobotImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard/': {
      id: '/Dashboard/'
      path: '/'
      fullPath: '/Dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/Fleet/': {
      id: '/Fleet/'
      path: '/Fleet'
      fullPath: '/Fleet'
      preLoaderRoute: typeof FleetIndexImport
      parentRoute: typeof rootRoute
    }
    '/Dashboard/FilterComponent/robotFilter': {
      id: '/Dashboard/FilterComponent/robotFilter'
      path: '/FilterComponent/robotFilter'
      fullPath: '/Dashboard/FilterComponent/robotFilter'
      preLoaderRoute: typeof DashboardFilterComponentRobotFilterImport
      parentRoute: typeof DashboardRouteImport
    }
    '/Dashboard/Robot/': {
      id: '/Dashboard/Robot/'
      path: '/Robot'
      fullPath: '/Dashboard/Robot'
      preLoaderRoute: typeof DashboardRobotIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/Dashboard/Station/': {
      id: '/Dashboard/Station/'
      path: '/Station'
      fullPath: '/Dashboard/Station'
      preLoaderRoute: typeof DashboardStationIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/Dashboard/battery/': {
      id: '/Dashboard/battery/'
      path: '/battery'
      fullPath: '/Dashboard/battery'
      preLoaderRoute: typeof DashboardBatteryIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/Dashboard/user/': {
      id: '/Dashboard/user/'
      path: '/user'
      fullPath: '/Dashboard/user'
      preLoaderRoute: typeof DashboardUserIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardFilterComponentRobotFilterRoute: typeof DashboardFilterComponentRobotFilterRoute
  DashboardRobotIndexRoute: typeof DashboardRobotIndexRoute
  DashboardStationIndexRoute: typeof DashboardStationIndexRoute
  DashboardBatteryIndexRoute: typeof DashboardBatteryIndexRoute
  DashboardUserIndexRoute: typeof DashboardUserIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardFilterComponentRobotFilterRoute:
    DashboardFilterComponentRobotFilterRoute,
  DashboardRobotIndexRoute: DashboardRobotIndexRoute,
  DashboardStationIndexRoute: DashboardStationIndexRoute,
  DashboardBatteryIndexRoute: DashboardBatteryIndexRoute,
  DashboardUserIndexRoute: DashboardUserIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteRouteWithChildren
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Dashboard/': typeof DashboardIndexRoute
  '/Fleet': typeof FleetIndexRoute
  '/Dashboard/FilterComponent/robotFilter': typeof DashboardFilterComponentRobotFilterRoute
  '/Dashboard/Robot': typeof DashboardRobotIndexRoute
  '/Dashboard/Station': typeof DashboardStationIndexRoute
  '/Dashboard/battery': typeof DashboardBatteryIndexRoute
  '/Dashboard/user': typeof DashboardUserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Dashboard': typeof DashboardIndexRoute
  '/Fleet': typeof FleetIndexRoute
  '/Dashboard/FilterComponent/robotFilter': typeof DashboardFilterComponentRobotFilterRoute
  '/Dashboard/Robot': typeof DashboardRobotIndexRoute
  '/Dashboard/Station': typeof DashboardStationIndexRoute
  '/Dashboard/battery': typeof DashboardBatteryIndexRoute
  '/Dashboard/user': typeof DashboardUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Dashboard': typeof DashboardRouteRouteWithChildren
  '/Fleet/addRobot': typeof FleetAddRobotRoute
  '/Dashboard/': typeof DashboardIndexRoute
  '/Fleet/': typeof FleetIndexRoute
  '/Dashboard/FilterComponent/robotFilter': typeof DashboardFilterComponentRobotFilterRoute
  '/Dashboard/Robot/': typeof DashboardRobotIndexRoute
  '/Dashboard/Station/': typeof DashboardStationIndexRoute
  '/Dashboard/battery/': typeof DashboardBatteryIndexRoute
  '/Dashboard/user/': typeof DashboardUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Dashboard'
    | '/Fleet/addRobot'
    | '/Dashboard/'
    | '/Fleet'
    | '/Dashboard/FilterComponent/robotFilter'
    | '/Dashboard/Robot'
    | '/Dashboard/Station'
    | '/Dashboard/battery'
    | '/Dashboard/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Fleet/addRobot'
    | '/Dashboard'
    | '/Fleet'
    | '/Dashboard/FilterComponent/robotFilter'
    | '/Dashboard/Robot'
    | '/Dashboard/Station'
    | '/Dashboard/battery'
    | '/Dashboard/user'
  id:
    | '__root__'
    | '/'
    | '/Dashboard'
    | '/Fleet/addRobot'
    | '/Dashboard/'
    | '/Fleet/'
    | '/Dashboard/FilterComponent/robotFilter'
    | '/Dashboard/Robot/'
    | '/Dashboard/Station/'
    | '/Dashboard/battery/'
    | '/Dashboard/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  FleetAddRobotRoute: typeof FleetAddRobotRoute
  FleetIndexRoute: typeof FleetIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  FleetAddRobotRoute: FleetAddRobotRoute,
  FleetIndexRoute: FleetIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Dashboard",
        "/Fleet/addRobot",
        "/Fleet/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Dashboard": {
      "filePath": "Dashboard/route.tsx",
      "children": [
        "/Dashboard/",
        "/Dashboard/FilterComponent/robotFilter",
        "/Dashboard/Robot/",
        "/Dashboard/Station/",
        "/Dashboard/battery/",
        "/Dashboard/user/"
      ]
    },
    "/Fleet/addRobot": {
      "filePath": "Fleet/addRobot.tsx"
    },
    "/Dashboard/": {
      "filePath": "Dashboard/index.tsx",
      "parent": "/Dashboard"
    },
    "/Fleet/": {
      "filePath": "Fleet/index.tsx"
    },
    "/Dashboard/FilterComponent/robotFilter": {
      "filePath": "Dashboard/FilterComponent/robotFilter.tsx",
      "parent": "/Dashboard"
    },
    "/Dashboard/Robot/": {
      "filePath": "Dashboard/Robot/index.tsx",
      "parent": "/Dashboard"
    },
    "/Dashboard/Station/": {
      "filePath": "Dashboard/Station/index.tsx",
      "parent": "/Dashboard"
    },
    "/Dashboard/battery/": {
      "filePath": "Dashboard/battery/index.tsx",
      "parent": "/Dashboard"
    },
    "/Dashboard/user/": {
      "filePath": "Dashboard/user/index.tsx",
      "parent": "/Dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
